import simpy
import random
import matplotlib.pyplot as plt
import numpy

RANDOM_SEED = 42
SERVER_CAPACITY = 5
NUM_SERVER = 3
server_list = []
CHOOSE_SERVER = [0,0,0,1,1,2]

# Sensititivetsanalys
ARRIVAL = 0.6
CONNECTION_TIME = 2

# St√∂rning (faktor)
PENALTY = 1

WAITING_TIMES = []

"""
- Client 
- param: time for connection, preferred server (nearest), list of nearby servers (suboptimal to preferred server)
"""
class Client(object):

    def __init__(self, client_id, env, connection_time, preferred_server = None, nearby_servers=None):
        self.client_id = "Client" + str(client_id)
        self.env = env
        self.connection_time = connection_time
        self.preferred_server = preferred_server
        self.nearby_servers = []

    def connect(self, server_list):
        print(self.client_id, "Trying to connect to: ", self.preferred_server.server_id, "at time ", self.env.now)
        arrive = self.env.now

        # Connect to prioritized server if available
        if len(self.preferred_server.connection.users) < self.preferred_server.capacity:
            with self.preferred_server.connection.request() as req:
                yield req
                wait = self.env.now - arrive
                WAITING_TIMES.append(wait)
                print(self.client_id, "Connected to preferred: ", self.preferred_server.server_id, "at time ", self.env.now,
                      "waited: ", wait)
                t = random.expovariate(1 / self.connection_time)

                yield env.timeout(t)
                print(self.client_id, "Connection finished ", env.now, "connection time ", t)

        # Check if another nearby server is available and connect
        else:
            connected_to_nearby = False

            for server in self.nearby_servers:
                if len(server.connection.users) < server.capacity:
                    with server.connection.request() as req:
                        yield req
                        wait = self.env.now - arrive
                        WAITING_TIMES.append(wait)
                        connected_to_nearby = True
                        print(self.client_id, "Connected to subpar: ", server.server_id, "at time ",
                                self.env.now, "waited: ", wait)
                        # Penealized connection
                        t = random.expovariate(1 / (self.connection_time * PENALTY))

                        yield env.timeout(t)
                        print(self.client_id, "Connection finished ", env.now, "connection time ", t)

            # If no other server nearby que to preferred server
            if not connected_to_nearby:
                print(self.client_id, "is in que for preferred server ", self.preferred_server.server_id)
                with self.preferred_server.connection.request() as req:
                    yield req
                    wait = self.env.now - arrive
                    WAITING_TIMES.append(wait)
                    print(self.client_id, "Connected to preferred: ", self.preferred_server.server_id, "at time ",
                          self.env.now, "waited: ", wait)
                    t = random.expovariate(1 / self.connection_time)

                    yield env.timeout(t)
                    print(self.client_id, "Connection finished ", env.now, "connection time ", t)


"""
- Server resource class
- param: a id, simpy environment, capacity (number of connections)
"""
class Server(object):

    def __init__(self, server_id, env, capacity):
        self.server_id = "Server"+str(server_id)
        self.env = env
        self.capacity = capacity
        self.connection = simpy.Resource(env, capacity=capacity)


"""
- Initialize clients and servers
- param: enviroment, amount of clients and servers
"""
def init(env, num_servers):
    for server in range(num_servers):
        server_list.append(Server(server, env, SERVER_CAPACITY))


    counter = 0
    while True:
        c = Client(counter, env, CONNECTION_TIME, server_list[0])
        #c = Client(counter, env, CONNECTION_TIME, server_list[random.choice(CHOOSE_SERVER)])
        #c = Client(counter, env, CONNECTION_TIME, random.choice(server_list))
        temp_server_list = [server for server in server_list if server != c.preferred_server]
        c.nearby_servers = temp_server_list
        env.process(c.connect(server_list))
        counter += 1
        timeout = random.expovariate(1 / ARRIVAL)
        yield env.timeout(timeout)


random.seed(RANDOM_SEED)

env = simpy.Environment()
env.process(init(env, NUM_SERVER))
env.run(until=1440)

AVERAGE_WAITING_TIMES = []
sum = 0
print(WAITING_TIMES)
for i in range(len(WAITING_TIMES)):
    sum += WAITING_TIMES[i]
    AVERAGE_WAITING_TIMES.append(sum/(i+1))

x = numpy.linspace(0, len(WAITING_TIMES), len(WAITING_TIMES))

plt.plot(x, AVERAGE_WAITING_TIMES)
#plt.plot(x, WAITING_TIMES)
plt.ylabel('Average waiting time')
plt.xlabel('Finished clients')
plt.text(1, 63, "Number of servers {}, Server capacity {}, Arrival rate {}"
         .format(NUM_SERVER, SERVER_CAPACITY, ARRIVAL))
plt.show()
